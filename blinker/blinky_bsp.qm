<?xml version="1.0" encoding="UTF-8"?>
<model version="5.1.1" links="0">
 <documentation>This is a redesign of the original Blinky example for the Arduino-UNO board, which blinks the on-board LED (L) once per second.

This example demonstrates:
1. A simple state machine.
2. One active object class &quot;Blinky&quot; (inside the package &quot;AOs&quot;).
3. Extended with a BSP (Board Support Packet, bsp_ino.ino).
4. in the BSP conditional compilation for debug information.</documentation>
 <framework name="qpn"/>
 <package name="AOs" stereotype="0x02">
  <class name="Blinky" superclass="qpn::QActive">
   <statechart properties="0x01">
    <initial target="../1">
     <action>QActive_armX((QActive *)me, 0U,
  BSP_TICKS_PER_SEC/2U, BSP_TICKS_PER_SEC);
logger(&quot;Start&quot;);</action>
     <initial_glyph conn="2,4,5,1,28,8,-6">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <state name="off">
     <entry brief="LED off">logger_P(LOG_MSG_LED_ON);
BSP_onboardLedOff ();</entry>
     <tran trig="Q_TIMEOUT" target="../../2">
      <tran_glyph conn="2,17,3,1,26,11,-4">
       <action box="0,-2,10,3"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,8,22,12">
      <entry box="1,2,8,3"/>
     </state_glyph>
    </state>
    <state name="on">
     <entry brief="LED on">logger_P(LOG_MSG_LED_OFF);
//logger(&quot;LED OFF&quot;);
BSP_onboardLedOn ();</entry>
     <tran trig="Q_BUTTON_PRESSED" target="../../1">
      <tran_glyph conn="2,32,3,1,28,-18,-6">
       <action box="0,-2,17,3"/>
      </tran_glyph>
     </tran>
     <tran trig="Q_TIMEOUT" target="../../1">
      <tran_glyph conn="2,36,3,1,32,-22,-10">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,24,22,16">
      <entry box="1,2,8,3"/>
     </state_glyph>
    </state>
    <state_diagram size="37,44"/>
   </statechart>
  </class>
 </package>
 <directory name=".">
  <file name="blinky.c">
   <text>#include &quot;qpn.h&quot;       // QP-nano framework
#include &quot;blinky.h&quot;  // Blinky interface
#include &quot;bsp.h&quot;     // BSP for this application
#include &quot;logger.h&quot;

const Q_ROM char LOG_MSG_LED_OFF[] = &quot;Led Off&quot;;
const Q_ROM char LOG_MSG_LED_ON[] = &quot;Led On&quot;;

//============================================================================
// declare all AO classes...
$declare${AOs::Blinky}
//...

// AO instances and event queue buffers for them...
struct Blinky AO_Blinky;

//============================================================================
void Blinky_ctor(void) {
    Blinky * const me = &amp;AO_Blinky;
    QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;Blinky_initial));
}

//============================================================================
// define all AO classes (state machine)...
$define${AOs::Blinky}
//...
</text>
  </file>
  <file name="blinky.h">
   <text>#ifndef BLINKY_H
#define BLINKY_H

enum BlinkySignals {
    Q_BUTTON_PRESSED_SIG = Q_USER_SIG,
    /* add more signals here... */
    MAX_SIG  /* the last signal */
};

void Blinky_ctor(void);
extern struct Blinky AO_Blinky;

#endif // BLINKY_H
</text>
  </file>
 </directory>
</model>
